




Kruskal 用来生成最小树

与prim 不一样的是，kruskal 是以边作为起点，每次找边的最小值，用 unionfind 检查 当前边的两个点是否联通，如果不联通 加入， 联通就跳过

1. 构建边的图，边是由两个点以及cost 组成的tuple
2. 建立union find， 然后把边的图进行排序
3. 排序后 边加入 边用uf 检查

class union_find:
    def __init__(self, n):
        self.father = {i:i for i in range(n)}
        self.rank = [1 for i in range(n)]
        self.count = n

    def find(self, x):
        if self.father[x] == x:
            return x
        self.father[x] = self.find(self.father[x])
        return self.father[x]

    def union(self, x, y):
        if self.rank[x] < self.rank[y]:
            x, y = y, x
        self.rank[x] += self.rank[y]
        self.father[y] = x
        self.count -= 1

    def union_andfind(self, x, y):
        father_x, father_y = self.find(x), self.find(y)
        if father_x != father_y:
            self.union(father_x, father_y)
            return False
        return True

class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        graph = []
        # 建立 边的关系图
        for i in range(len(points)):
            for j in range(i + 1, len(points)):
                cost = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])
                graph.append([i, j, cost])
        n = len(points)
        result = 0
        uf = union_find(n)
        # 排序边，然后遍历
        for edge in sorted(graph, key = lambda x:x[2]):
            # 用uf 来检查当前边链接的两个点是否联通
            if not uf.union_andfind(edge[0], edge[1]):
                # 不联通就加上cost
                result += edge[2]
        return result
时间复杂度 ElogV