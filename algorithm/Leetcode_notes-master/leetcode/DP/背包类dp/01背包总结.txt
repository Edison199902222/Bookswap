

一般来说 转移方程
dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - c] + w）
“将前 i 件物品放入容量为 j 的背包中”这个子问题，若只考虑第 i 件物品的策略（放或不放），那么就可以转化为一个只和前 i − 1 件物品相关
的问题。如果不放第 i 件物品，那么问题就转化为“前 i − 1 件物品放入容量为 v 的背包中”，价值为 F[i − 1, v]；如果放第 i 件物品，那么问题就转化为“前 i − 1 件物品放
入剩下的容量为 j − C 的背包中”，此时能获得的最大价值就是 dp[i − 1, j − C] 再加上通过放入第 i 件物品获得的价值 W

如果想遇到三维dp 想优化到二维，一般枚举时，需要从后往前遍历 避免前i - 1个物品的 dp 状态被更新掉